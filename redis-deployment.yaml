apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
    environment: prod
    app.kubernetes.io/name: crossd
    app.kubernetes.io/instance: crossd-alpha
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/component: redis
    app.kubernetes.io/part-of: crossd
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: { type: RollingUpdate }
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
        pod: redis
    spec:
      restartPolicy: Always
      securityContext:
        runAsUser: 1337
        runAsGroup: 1337
      containers:
        - image: redis:7
          args:
            - sh
            - -c
            - ' docker-entrypoint.sh --appendonly "yes" --requirepass $RAUTH --tls-port 6379 --port 0 --tls-cert-file /tls/tls.crt --tls-key-file /tls/tls.key --tls-ca-cert-file /tls/ca.crt --tls-auth-clients no'
          ports:
            - containerPort: 6379
          imagePullPolicy: Always
          name: redis
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: RAUTH
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: RAUTH
          volumeMounts:
            - mountPath: /data
              name: redis-pvc
            - name: certs
              mountPath: "/tls"
              readOnly: true
      volumes:
        - name: redis-pvc
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: certs
          secret:
            secretName: redis-cert-secret
status: {}
